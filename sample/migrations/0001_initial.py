# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-12-14 09:51
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('library_sample_shared', '0002_load_shared_data'),
    ]

    operations = [
        migrations.CreateModel(
            name='FileSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('file', models.FileField(upload_to='samples/%Y/%m/%d/')),
            ],
        ),
        migrations.CreateModel(
            name='NucleicAcidType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('type', models.CharField(choices=[('DNA', 'DNA'), ('RNA', 'RNA')], default='DNA', max_length=3, verbose_name='Type')),
            ],
            options={
                'verbose_name_plural': 'Nucleic Acid Types',
                'verbose_name': 'Nucleic Acid Type',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Name')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('status', models.SmallIntegerField(default=0)),
                ('concentration', models.FloatField(verbose_name='Concentration')),
                ('dna_dissolved_in', models.CharField(max_length=255, verbose_name='DNA Dissolved in')),
                ('sample_volume', models.PositiveIntegerField(verbose_name='Sample Volume')),
                ('equal_representation_nucleotides', models.BooleanField(default=True, verbose_name='Equal Representation of Nucleotides')),
                ('sequencing_depth', models.PositiveIntegerField(verbose_name='Sequencing Depth')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('is_in_request', models.BooleanField(default=False, verbose_name='Is in request?')),
                ('is_pooled', models.BooleanField(default=False, verbose_name='Is pooled?')),
                ('barcode', models.CharField(max_length=9, verbose_name='Barcode')),
                ('index_i7', models.CharField(blank=True, max_length=8, null=True, verbose_name='Index I7')),
                ('index_i5', models.CharField(blank=True, max_length=8, null=True, verbose_name='Index I5')),
                ('dilution_factor', models.PositiveIntegerField(blank=True, null=True, verbose_name='Dilution Factor (facility)')),
                ('concentration_facility', models.FloatField(blank=True, null=True, verbose_name='Concentration (facility)')),
                ('date_facility', models.DateTimeField(blank=True, null=True, verbose_name='Date (facility)')),
                ('sample_volume_facility', models.PositiveIntegerField(blank=True, null=True, verbose_name='Sample Volume (facility)')),
                ('amount_facility', models.FloatField(blank=True, null=True, verbose_name='Amount (facility)')),
                ('size_distribution_facility', models.CharField(blank=True, max_length=200, null=True, verbose_name='Size Distribution (facility)')),
                ('comments_facility', models.TextField(blank=True, null=True, verbose_name='Comments (facility)')),
                ('amplified_cycles', models.PositiveIntegerField(blank=True, null=True, verbose_name='Sample Amplified Cycles')),
                ('dnase_treatment', models.NullBooleanField(verbose_name='DNase Treatment')),
                ('rna_quality', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11', 'Determined by Facility')], max_length=2, null=True, verbose_name='RNA Quality')),
                ('rna_spike_in', models.NullBooleanField(verbose_name='RNA Spike in')),
                ('sample_preparation_protocol', models.CharField(blank=True, max_length=150, null=True, verbose_name='Sample Preparation Protocol')),
                ('requested_sample_treatment', models.CharField(blank=True, max_length=200, null=True, verbose_name='Requested Sample Treatment')),
                ('is_converted', models.BooleanField(default=False, verbose_name='Is converted?')),
                ('rna_quality_facility', models.FloatField(blank=True, null=True, verbose_name='RNA Quality (RIN, RQN) (facility)')),
                ('concentration_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_sample_shared.ConcentrationMethod', verbose_name='Concentration Method')),
                ('concentration_method_facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='library_sample_shared.ConcentrationMethod', verbose_name='Concentration Method (facility)')),
                ('files', models.ManyToManyField(blank=True, related_name='files', to='sample.FileSample')),
                ('index_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='library_sample_shared.IndexType', verbose_name='Index Type')),
                ('nucleic_acid_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nucleic_acid_type', to='sample.NucleicAcidType', verbose_name='Nucleic Acid Type')),
                ('organism', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_sample_shared.Organism', verbose_name='Organism')),
                ('read_length', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_sample_shared.ReadLength', verbose_name='Read Length')),
            ],
            options={
                'verbose_name_plural': 'Samples',
                'verbose_name': 'Sample',
            },
        ),
        migrations.CreateModel(
            name='SampleProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Name')),
                ('type', models.CharField(choices=[('DNA', 'DNA'), ('RNA', 'RNA')], default='DNA', max_length=3, verbose_name='Type')),
                ('provider', models.CharField(max_length=150, verbose_name='Provider')),
                ('catalog', models.CharField(max_length=150, verbose_name='Catalog')),
                ('explanation', models.CharField(max_length=250, verbose_name='Explanation')),
                ('input_requirements', models.CharField(max_length=150, verbose_name='Input Requirements')),
                ('typical_application', models.CharField(max_length=200, verbose_name='Typical Application')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
            ],
            options={
                'verbose_name_plural': 'Sample Protocols',
                'verbose_name': 'Sample Protocol',
            },
        ),
        migrations.AddField(
            model_name='sample',
            name='sample_protocol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sample_protocol', to='sample.SampleProtocol', verbose_name='Sample Protocol'),
        ),
    ]
